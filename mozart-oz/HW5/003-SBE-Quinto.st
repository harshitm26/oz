SimpleSwitchMorph subclass: #SBECell	instanceVariableNames: 'mouseAction'	classVariableNames: ''	poolDictionaries: ''	category: 'SBE-Quinto'!!SBECell methodsFor: 'accessing'!mouseAction: aBlock 	^ mouseAction := aBlock! !!SBECell methodsFor: 'accessing'!mouseUp: anEvent 	mouseAction value! !!SBECell methodsFor: 'initialization'!initialize	super initialize.	self label: ''.	self borderWidth: 2.	bounds := 0 @ 0 corner: 32 @ 32.	offColor := Color paleYellow.	onColor := Color paleBlue darker.	self useSquareCorners.	self turnOff! !!SBECell methodsFor: 'initialization'!turnOff	self setSwitchState: false! !!SBECell methodsFor: 'as yet unclassified'!mouseMove: anEvent 	mouseAction value! !!SBECell methodsFor: 'as yet unclassified'!toggleState	self color = onColor		ifTrue: [self color: offColor]		ifFalse: [self color: onColor]! !BorderedMorph subclass: #SBEGame	instanceVariableNames: 'cells'	classVariableNames: ''	poolDictionaries: ''	category: 'SBE-Quinto'!!SBEGame methodsFor: 'initialization'!initialize	| sampleCell width height n |	super initialize.	n := self cellsPerSide.	sampleCell := SBECell new.	width := sampleCell width.	height := sampleCell height.	self		bounds: (5 @ 5 extent: width * n @ (height * n) + (2 * self borderWidth)).	cells := Matrix				new: n				tabulate: [:i :j | self newCellAt: i at: j]! !!SBEGame methodsFor: 'game logic'!cellsPerSide	^ 10! !!SBEGame methodsFor: 'game logic'!newCellAt: i at: j 	| c origin |	c := SBECell new.	origin := self innerBounds origin.	self addMorph: c.	c position: i - 1 * c width @ (j - 1 * c height) + origin.	c		mouseAction: [self toggleNeighboursOfCellAt: i at: j].	^ c! !!SBEGame methodsFor: 'game logic'!toggleNeighboursOfCellAt: i at: j 	i > 1		ifTrue: [(cells at: i - 1 at: j) toggleState].	i < self cellsPerSide		ifTrue: [(cells at: i + 1 at: j) toggleState].	j > 1		ifTrue: [(cells at: i at: j - 1) toggleState].	j < self cellsPerSide		ifTrue: [(cells at: i at: j + 1) toggleState]! !BorderedMorph subclass: #SBEMinesweeper	instanceVariableNames: 'cells mines nsweeps nsafes over'	classVariableNames: ''	poolDictionaries: ''	category: 'SBE-Quinto'!!SBEMinesweeper methodsFor: 'initialization'!initialize	| sampleCell width height n random t |	super initialize.	nsafes := 0.	n := self cellsPerSide.	sampleCell := SBECell new.	width := sampleCell width.	height := sampleCell height.	self		bounds: (5 @ 5 extent: width * n @ (height * n) + (2 * self borderWidth)).	random := Random new.	random initialize.	mines := Matrix				new: n				tabulate: [:i :j | 					t := random next.					t > self probability						ifTrue: [nsafes := nsafes + 1].					t].	cells := Matrix				new: n				tabulate: [:i :j | self newCellAt: i at: j].	nsweeps := 0.	over := false! !!SBEMinesweeper methodsFor: 'game logic'!cellsPerSide	^ 10! !!SBEMinesweeper methodsFor: 'game logic'!newCellAt: i at: j 	| c origin |	c := SBECell new.	origin := self innerBounds origin.	self addMorph: c.	c position: i - 1 * c width @ (j - 1 * c height) + origin.	c		mouseAction: [self probeCellAt: i at: j].	^ c! !!SBEMinesweeper methodsFor: 'game logic'!probability	^ 0.2! !!SBEMinesweeper methodsFor: 'game logic'!toggleNeighboursOfCellAt: i at: j 	i > 1		ifTrue: [(cells at: i - 1 at: j) toggleState].	i < self cellsPerSide		ifTrue: [(cells at: i + 1 at: j) toggleState].	j > 1		ifTrue: [(cells at: i at: j - 1) toggleState].	j < self cellsPerSide		ifTrue: [(cells at: i at: j + 1) toggleState]! !!SBEMinesweeper methodsFor: 'as yet unclassified'!probeCellAt: i at: j 	| content cell |	over = true		ifFalse: [content := mines at: i at: j.			cell := cells at: i at: j.			content < self probability				ifTrue: [cell color: Color red.					over := true]				ifFalse: [cell setSwitchState: true.					nsweeps := nsweeps + 1.					nsweeps = nsafes						ifTrue: [over := true.							cell color: Color green]]]! !